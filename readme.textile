This is a fork of Johann Heynes (johannheyne) "Adaptive Images (extendend)", based on Matthew Wilcox (mattwilcox) original code and idea of "Adaptive Images". Thank you both!


h1. Adaptive Images (über-extended)

*Adaptive Images* (AI) automatically creates, caches, and delivers device-appropriate versions of a website's content images. "Device-appropriate" in respect to device width and device pixel ratio. It is intended for use with "Responsive Designs":http://www.abookapart.com/products/responsive-web-design and to be combined with "Fluid Images":http://unstoppablerobotninja.com/entry/fluid-images/ techniques.

*Adaptive Images (extended)* (AIe) then added (complicated sounding) functionality to control generated image size (and quality and many other details) in respect to given design breakpoints – corresponding to the users device width – via a url query string when the image actually is going to be requested. To set this up, one needed to define the ['terms'] ( = size terms = future query strings) with their additional values and rules inside the new separate file called "setup.php". To achieve that it needed (and has) a slighty different filename structure inside its cache folder.

*Adaptive Images (über-extended)* (AIue) – this fork – now contains minor alterations, further improvements and bugfixes for this concept, the original authors didn’t manage to commit yet – and perchance may eventually become its own new creation by itself with even more added stuff and a lot of highly over-engineered cool features the world so eagerly waited for. ;) 



h2. Benefits of Adaptive Images In General

* It safes bandwidth: takes care that your webpage only delivering images at a resolution not higher than the vistor would need (except you want it otherwise).
* It provides structure: You only need to manage one full res image.
* It is device agnostic: it works by detecting the size of the visitors screen.
* It is CMS agnostic: it manages its own image resizing and will work on any CMS or even on flat HTML pages.
* It is highly configurable:
** Choose where you want the cached files to be stored
** Configure directories to ignore, whre you don’t want AI to apply

h2. How It Works
* One line of JavaScript (uuuh!) sets a small cookie (ooouu!) containing the screen resolution and the pixel density of the users device when the page is about to load.
* When an image is requested, .htaccess intercepts this request and passes it to adaptive-images.php, performing the logic to serve the appropriate image size.

For further details on this concept, see Matt Wilcox’ original "Apaptive Images Homepage":http://adaptive-images.com/details.htm.
And/or see *More Detailed Description* below for comparison between the forks.

h2. Install

* Add the line of JavaScript you find in *adaptive-images-cookie-line.js* to your web pages head at the top most position possible.
* Copy the adaptive-images folder into your web pages root directory.
* Make sure the permission of the adaptive-images directory and ai-cache subdirectory is (at least) *755*.
* Copy the .htaccess into your web pages root directory – or copy its code section in the existing .htaccess file.
* Set up path names in .htaccess with RewriteCond rules, to ignore images in ("blacklist") or simply make a "whitelist" of paths you wish AI to apply in.
* Just make sure *again* that the last RewriteRule contains the proper path leading to your adaptive-images.php. 
* Make use of setup.php.

Alternatively put the .htaccess in your images directory for example, and/or the adaptive-images folder somewhere else on your server, but then *make sure that the RewriteRule points to the proper adaptive-images.php location* relative to your directory structure! 

h2. More Detailed Description

h3. The Original "Adaptive Images" Behavior by Matt Wilcox

We want that as a default, by setting *$config['enable_resolutions'] = TRUE* in setup.php.

&#060;img src="image.jpg" /&#062;

This will resizes every image matching the rewrite conditions in .htaccess file. The size of the image will be the one value of the $config['resolutions'] that is equal or closest higher than the users device maximum width.

When disabled (*FALSE*), the requested images will be served in its original full size; as long as there’s no size-term attached via query string – see next paragraph. 


h3. The More Specific Behavior of "Adaptive Images (extended)" by Johann Heyne

&#060;img src="image.jpg?size=term" /&#062;

*Breakpoints and sizes*
Now you can define, what size an image has to have on specific configurable design breakpoints equal to your CSS media queries. Your can give them custom names (the "size term") and set the their widths in pixel or percentage. If you use for instance 100% as a default case, the image will be 100% of the size of the resolution, that is equal or closest higher than the present users device maximum width – but maximum width of the largest configured resolution breakpoint but also not larger than the original full-res image size.

*Cropping (cutting to fit)*
You can define an aspect ratio for a term. All depending images will be cropped to that ratio after resizing is done.

*Sharpen*
You can define if you want to sharpen the resized images and even the amount of sharpness applied. 0 is no sharpening at all, up to 30 is subtile, more than 30 is really impacting, max is 500 (imagine that!).

*JPEG quality*
You can define the JPEG quality for a size term when device pixel ratio is at 1. If above 1 ( = "retina"), you can set a different JPEG compression level – very useful for applying "Netvlies Retina Revolution Trick":http://blog.netvlies.nl/design-interactie/retina-revolution/ if you want to use it. JPEG quality 100: of course is best; down to 70: is pleasant; below 40: really compressed (and small in size).

*Prevent cache*
For developing, you might want to disable caching, to see changes of the setup and the images on every page reload. For this, in setup.php do:

* $config['browser_cache'] = 0;
* $config['prevent_cache'] = TRUE;

But remember to turn caching on again, when the site is going live!

*Debug mode*
This inserts some information into the generated images like: image dimensions, the aspect ratio, the device-width and pixel density.


h3. The Even More Useful Additions of "Adaptive Images (über-extended)"

* Percentage breakpoints are generated by default; with smart sharpening, according to the amount of resizing done.
* Makes us of "scalings": breakpoint sizes don’™ dictate the size of the generated image width any more – if you want to.
* Request and serve the original image by using special query strings like "?original" or "?size=fullsize".

		
h2. Legal

"Adaptive Images (über-extended)" is forked and adapted from "Adaptive Images (extended)" by Johann Heyne, using the original "Adaptive Images" code and idea by Matt Wilcox.
"Adaptive Images" by Matt Wilcox is licensed under a "Creative Commons Attribution 3.0 Unported License":http://creativecommons.org/licenses/by/3.0/